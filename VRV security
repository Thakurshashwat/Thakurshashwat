vrv security 
import re
from collections import Counter

def count_requests_per_ip(log_file_path):
    """
    Parse the log file to extract IP addresses and count the requests per IP.

    :param log_file_path: Path to the log file
    :return: None (Prints the sorted results)
    """
    ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
    ip_counter = Counter()

    try:
        with open(log_file_path, 'r') as file:
            for line in file:
                # Extract IP addresses from each line
                ips = re.findall(ip_pattern, line)
                ip_counter.update(ips)
        
        # Sort IP addresses by request count in descending order
        sorted_ips = ip_counter.most_common()

        # Display the results
        print(f"{'IP Address':<20}{'Request Count':<15}")
        print("-" * 35)
        for ip, count in sorted_ips:
            print(f"{ip:<20}{count:<15}")

    except FileNotFoundError:
        print(f"Error: File not found at path {log_file_path}")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
log_file_path = 'example.log'  # Replace with your log file path
count_requests_per_ip(log_file_path)
